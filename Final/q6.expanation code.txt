#
#q6 explanation.asm
#
#Tony Liu
#12/15/21
#
#Take the user charater and prin it in a console until 'q' is typed.
# Kernel data section
        .kdata

#value holding will be stored in this registers

s1:     .word 10         # storage for register $v0     
s2:     .word 11         # storage for register $a0
#new line 
new:    .asciiz     "\n"

#Section that contains instructions and program logic
        .text     
		.globl     main    

main:   
#Coprocessor 0 register $12; status register
#this code enable the interrupt in call process register and receiver control registers
#the exponet = 0111110 or an actual exponet of -1
        mfc0    $a0, $12     	    #read from the status register     
		ori     $a0, 0xff11     	#enable all interrupts     
		mtc0 	$a0, $12     	    #write back to the status register

		lui     $t0, 0xFFFF     	#$t0 = 0xFFFF0000     
		ori     $a0, $0, 2     	    #enable keyboard interrupt     
		sw     	$a0, 0($t0)     	#write back to 0xFFFF0000;Receiver Control


#the program has the interrupt so it will go to the kernel exception handler
    loop:   j 	loop    			    #   stay here forever keep program running

# KERNEL text
#PC is set to be 0x80000180, the starting address of the interrupthandler 
#which takes the processor to theinterrupt handler

The address of the instruction that is about to be executed is saved into aspecial register called EPC

	.ktext  0x80000180     	        # kernel code starts here section
#save registers
    sw     	$v0, s1     		    #  We need to use these registers  
	sw     	$a0, s2     	        #  not using the stack because the interrupt

#$k0 and $k1 are both used as temporary variables in interrupt servicing routines.
#Coprocessor 0 Register $13; Cause register
#detect the exception called 
#When an interrupts occurs, the Cause Register indicates 
#For an exception,  the exception fields hold the exception type
#For an interrupt,  the exception fields hold the 0000; the bits will be set for pending interrupts.
    mfc0 	$k0, $13     	        #   Cause register     
	srl     $a0, $k0, 2     	    #   Extract   ExcCode     Field     
	andi    $a0, $a0, 0x1f 	        #   Get the exception code
	bne     $a0, $zero, kdone       # Exception Code 0 is I/O. Only processing I/O

#we use the loop here to wait for the user input and also test the input of the user.

    waitloop:
#get the data from the memory mapped I/O Receiver data register
    lui     $v0, 0xffff    	        #   $v0 =   0xFFFF0000     
	lw     	$a0, 4($v0)   	        #  get the input key
ascii value of q = 113 will be save in s0  
    li 	    $s0, 113		        # load the q key into s0
will test the s0 to the user input if is the samme will branch to quit
    beq 	$a0, $s0, quit 	        # exit if 'q' is typed in not print 
#print the character
    li 	$v0,1     		            # print it here.      
	syscall     			        	
#print the next character tab 						               
	li $v0,4     			        #   print the new line     
	la $a0, new
	syscall
#will go back to the loop to test for the q.  
    j waitloop
    
#only will be access if the user press q for the program to end
quit:								#quit,end the program when the q key pressed 
	li $v0	10		
	syscall